@page "/"

@using despesas_blazor_webAssembly.Models
@using despesas_blazor_webAssembly.Service.Interface

@inject IJSRuntime JsRuntime
@inject ISpendService _spendService

<PageTitle>Index</PageTitle>

<h1 class="h1-spend">Cadastra despesas</h1>
<button class="btn btn-primary" @onclick="() => OpenModal()">Nova despesa</button>

@if(TotalOfSpends > 0)
{
    <div class="alert alert-secondary" style="margin-top: 12px;" role="alert">
        Total de despesas: @TotalOfSpends
    </div>
}

<div class="tabela-Spend">
    @if (spend == null)
    {
        <p><em>Carregando...</em></p>
    }
    else
    {
        <table class='table'>
            <thead>
                <tr>
                
                    <th>Name</th>
                    <th>Type Spend</th>
                    <th>Description</th>
                    <th>Value</th>
                    <th>Parcel</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var spend in spends)
                {
                    <tr>
                        <td>@spend.Name</td>
                        <td>@spend.TypeSpend</td>
                        <td>@spend.Description</td>
                        <td>@spend.Value</td>
                        <td>@spend.Parcel</td>
                        <td>
                            <a href='#' @onclick="async () => await Delete(spend.Id)">Deletar</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

<!------------------------------------------------------------------------------------------------------------>

<ModalDialog @ref="@modalDialog" Title="Criar despesa">
    <div class="row">
        <div class="form-group">
            <label for="spendDescription" class="col-form-label">Name:</label>
            <input @bind-value="spend.Name" type="text" class="form-control" id="spendDescription">
        </div>
        <div class="form-group">
            <label for="spendDescription" class="col-form-label">Type Spend:</label>
            <input @bind-value="spend.TypeSpend" type="text" class="form-control" id="spendDescription">
        </div>
        <div class="form-group">
            <label for="spendDescription" class="col-form-label">Description:</label>
            <input @bind-value="spend.Description" type="text" class="form-control" id="spendDescription">
        </div>
        <div class="form-group">
            <label for="spendValue" class="col-form-label">Value:</label>
            <input @bind-value="spend.Value" id="spendValue" class="form-control" />
        </div>
        <div class="form-group">
            <label for="spendValue" class="col-form-label">Parcel:</label>
            <input @bind-value="spend.Parcel" id="spendValue" class="form-control" />
        </div>

        <div class="modal-footer">
            <button class="btn btn-secondary" @onclick="() => modalDialog.Close()">Cancelar</button>
            <button type="button" class="btn btn-primary" @onclick="async () => await AddSpend()">Salvar</button>
        </div>
    </div>
</ModalDialog>




@code{
    private ModalDialog? modalDialog {get;set;}
    private Spend? spend {get;set;}
    private List<Spend> spends = new();
    private double TotalOfSpends => spends.Sum(s => s.Value);

    protected override async Task OnInitializedAsync()
    {
        spend = new();

        spends = await _spendService.GetSpends();
    }

    async Task Delete(Guid id)
    {
        // bool confirmed = await JsRuntime.InvokeAsync<bool>("Confirm", "Tem certeza que deseja excluir ?");
        // if (confirmed is false)
        //     return;

        var spendToRemove = spends.FirstOrDefault(s => s.Id == id);
        spends.Remove(spendToRemove);

        await _spendService.SaveSpends(spends);
    }

    async Task AddSpend()
    {
        if (string.IsNullOrWhiteSpace(spend.Description))
        {
            await JsRuntime.InvokeAsync<bool>("Alert", "Você precisa colocar uma descrição");
        }

        if (spend.Value <= 0)
        {
            await JsRuntime.InvokeAsync<bool>("Alert", "O valor precisa ser maior que zero");
        }

        spends.Add(new Spend()
        {
            Id = Guid.NewGuid(),
            Name = spend.Name,
            TypeSpend = spend.TypeSpend,
            Description = spend.Description,
            Value = spend.Value,
            Parcel = spend.Parcel
        });
    }

    void OpenModal()
    {
        spend = new();
        modalDialog.Open();
    }


}
